{"version":3,"file":"953.bundle.81de8872260c5be9ef03.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\r\n\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n  Tooltip,\r\n  Icon,\r\n} from '@ohif/ui';\r\nimport classNames from 'classnames';\r\nimport hydrateStructuredReport from '../utils/hydrateStructuredReport';\r\n\r\nconst { formatDate } = utils;\r\n\r\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\r\n  '@ohif/extension-measurement-tracking';\r\n\r\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\r\n\r\nfunction OHIFCornerstoneSRViewport(props) {\r\n  const {\r\n    children,\r\n    dataSource,\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SRViewport');\r\n\r\n  const {\r\n    DisplaySetService,\r\n    CornerstoneViewportService,\r\n    MeasurementService,\r\n  } = servicesManager.services;\r\n\r\n  // SR viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SR viewport should only have a single display set');\r\n  }\r\n\r\n  const srDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n  const [measurementSelected, setMeasurementSelected] = useState(0);\r\n  const [measurementCount, setMeasurementCount] = useState(1);\r\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\r\n    null\r\n  );\r\n  const [\r\n    referencedDisplaySetMetadata,\r\n    setReferencedDisplaySetMetadata,\r\n  ] = useState(null);\r\n  const [isHydrated, setIsHydrated] = useState(srDisplaySet.isHydrated);\r\n  const [element, setElement] = useState(null);\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  // Optional hook into tracking extension, if present.\r\n  let trackedMeasurements;\r\n  let sendTrackedMeasurementsEvent;\r\n\r\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\r\n    MEASUREMENT_TRACKING_EXTENSION_ID\r\n  );\r\n\r\n  if (hasMeasurementTrackingExtension) {\r\n    const contextModule = extensionManager.getModuleEntry(\r\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\r\n    );\r\n\r\n    const tracked = useContext(contextModule.context);\r\n    trackedMeasurements = tracked?.[0];\r\n    sendTrackedMeasurementsEvent = tracked?.[1];\r\n  }\r\n  if (!sendTrackedMeasurementsEvent) {\r\n    // if no panels from measurement-tracking extension is used, this code will run\r\n    trackedMeasurements = null;\r\n    sendTrackedMeasurementsEvent = (eventName, { displaySetInstanceUID }) => {\r\n      MeasurementService.clearMeasurements();\r\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\r\n        { servicesManager, extensionManager },\r\n        displaySetInstanceUID\r\n      );\r\n      const displaySets = DisplaySetService.getDisplaySetsForSeries(\r\n        SeriesInstanceUIDs[0]\r\n      );\r\n      if (displaySets.length) {\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportIndex: activeViewportIndex,\r\n          displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store the tracking identifiers per viewport in order to be able to\r\n   * show the SR measurements on the referenced image on the correct viewport,\r\n   * when multiple viewports are used.\r\n   */\r\n  const setTrackingIdentifiers = useCallback(\r\n    measurementSelected => {\r\n      const { measurements } = srDisplaySet;\r\n\r\n      setTrackingUniqueIdentifiersForElement(\r\n        element,\r\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\r\n        measurementSelected\r\n      );\r\n    },\r\n    [element, measurementSelected, srDisplaySet]\r\n  );\r\n\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const updateViewport = useCallback(\r\n    newMeasurementSelected => {\r\n      const {\r\n        StudyInstanceUID,\r\n        displaySetInstanceUID,\r\n        sopClassUids,\r\n      } = srDisplaySet;\r\n\r\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n        return;\r\n      }\r\n\r\n      if (sopClassUids && sopClassUids.length > 1) {\r\n        // Todo: what happens if there are multiple SOP Classes? Why we are\r\n        // not throwing an error?\r\n        console.warn(\r\n          'More than one SOPClassUID in the same series is not yet supported.'\r\n        );\r\n      }\r\n\r\n      _getViewportReferencedDisplaySetData(\r\n        srDisplaySet,\r\n        newMeasurementSelected,\r\n        DisplaySetService\r\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\r\n        setMeasurementSelected(newMeasurementSelected);\r\n        setActiveImageDisplaySetData(referencedDisplaySet);\r\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\r\n\r\n        if (\r\n          referencedDisplaySet.displaySetInstanceUID ===\r\n          activeImageDisplaySetData?.displaySetInstanceUID\r\n        ) {\r\n          const { measurements } = srDisplaySet;\r\n\r\n          // it means that we have a new referenced display set, and the\r\n          // imageIdIndex will handle it by updating the viewport, but if they\r\n          // are the same we just need to use MeasurementService to jump to the\r\n          // new measurement\r\n          const viewportInfo = CornerstoneViewportService.getViewportInfoByIndex(\r\n            viewportIndex\r\n          );\r\n\r\n          const csViewport = CornerstoneViewportService.getCornerstoneViewport(\r\n            viewportInfo.getViewportId()\r\n          );\r\n\r\n          const imageIds = csViewport.getImageIds();\r\n\r\n          const imageIdIndex = imageIds.indexOf(\r\n            measurements[newMeasurementSelected].imageId\r\n          );\r\n\r\n          if (imageIdIndex !== -1) {\r\n            csViewport.setImageIdIndex(imageIdIndex);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\r\n  );\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    if (!activeImageDisplaySetData) {\r\n      return null;\r\n    }\r\n\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { measurements } = srDisplaySet;\r\n    const measurement = measurements[measurementSelected];\r\n\r\n    if (!measurement) {\r\n      return null;\r\n    }\r\n\r\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\r\n      image => image.imageId === measurement.imageId\r\n    );\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        // should be passed second since we don't want SR displaySet to\r\n        // override the activeImageDisplaySetData\r\n        displaySets={[activeImageDisplaySetData]}\r\n        viewportOptions={{\r\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        initialImageIndex={initialImageIndex}\r\n      ></Component>\r\n    );\r\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\r\n\r\n  const onMeasurementChange = useCallback(\r\n    direction => {\r\n      let newMeasurementSelected = measurementSelected;\r\n\r\n      if (direction === 'right') {\r\n        newMeasurementSelected++;\r\n\r\n        if (newMeasurementSelected >= measurementCount) {\r\n          newMeasurementSelected = 0;\r\n        }\r\n      } else {\r\n        newMeasurementSelected--;\r\n\r\n        if (newMeasurementSelected < 0) {\r\n          newMeasurementSelected = measurementCount - 1;\r\n        }\r\n      }\r\n\r\n      setTrackingIdentifiers(newMeasurementSelected);\r\n      updateViewport(newMeasurementSelected);\r\n    },\r\n    [\r\n      measurementSelected,\r\n      measurementCount,\r\n      updateViewport,\r\n      setTrackingIdentifiers,\r\n    ]\r\n  );\r\n\r\n  /**\r\n   Cleanup the SR viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\r\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Loading the measurements from the SR viewport, which goes through the\r\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\r\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\r\n   * we are changing the state here? isHydrated is always false at this stage, and\r\n   * if it is hydrated we don't event use the SR viewport.\r\n   */\r\n  useEffect(() => {\r\n    if (!srDisplaySet.isLoaded) {\r\n      srDisplaySet.load();\r\n    }\r\n    setIsHydrated(srDisplaySet.isHydrated);\r\n\r\n    const numMeasurements = srDisplaySet.measurements.length;\r\n    setMeasurementCount(numMeasurements);\r\n  }, [srDisplaySet]);\r\n\r\n  /**\r\n   * Hook to update the tracking identifiers when the selected measurement changes or\r\n   * the element changes\r\n   */\r\n  useEffect(() => {\r\n    if (!element || !srDisplaySet.isLoaded) {\r\n      return;\r\n    }\r\n    setTrackingIdentifiers(measurementSelected);\r\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\r\n\r\n  /**\r\n   * Todo: what is this, not sure what it does regarding the react aspect,\r\n   * it is updating a local variable? which is not state.\r\n   */\r\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  useEffect(() => {\r\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  }, [trackedMeasurements]);\r\n\r\n  /**\r\n   * Data fetching for the SR displaySet, which updates the measurements and\r\n   * also gets the referenced image displaySet that SR is based on.\r\n   */\r\n  useEffect(() => {\r\n    updateViewport(measurementSelected);\r\n  }, [dataSource, srDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n  } = referencedDisplaySetMetadata;\r\n\r\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onMeasurementChange}\r\n        getStatusComponent={() =>\r\n          _getStatusComponent({\r\n            srDisplaySet,\r\n            viewportIndex,\r\n            isTracked: false,\r\n            isRehydratable: srDisplaySet.isRehydratable,\r\n            isLocked,\r\n            sendTrackedMeasurementsEvent,\r\n          })\r\n        }\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: SeriesDescription || '',\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSRViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneSRViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nasync function _getViewportReferencedDisplaySetData(\r\n  displaySet,\r\n  measurementSelected,\r\n  DisplaySetService\r\n) {\r\n  const { measurements } = displaySet;\r\n  const measurement = measurements[measurementSelected];\r\n\r\n  const { displaySetInstanceUID } = measurement;\r\n\r\n  const referencedDisplaySet = DisplaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\r\n}\r\n\r\nfunction _getStatusComponent({\r\n  srDisplaySet,\r\n  viewportIndex,\r\n  isRehydratable,\r\n  isLocked,\r\n  sendTrackedMeasurementsEvent,\r\n}) {\r\n  const onPillClick = () => {\r\n    sendTrackedMeasurementsEvent('RESTORE_PROMPT_HYDRATE_SR', {\r\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\r\n      viewportIndex,\r\n    });\r\n  };\r\n\r\n  // 1 - Incompatible\r\n  // 2 - Locked\r\n  // 3 - Rehydratable / Open\r\n  const state =\r\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (state) {\r\n    case 1:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            backgroundColor: '#98e5c1',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"exclamation\"\r\n            style={{ color: '#000', width: '12px', height: '12px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is not compatible\r\n          <br />\r\n          with this application.\r\n        </div>\r\n      );\r\n      break;\r\n    case 2:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 bg-black rounded-full\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"lock\"\r\n            style={{ color: '#05D97C', width: '8px', height: '11px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is currently read-only\r\n          <br />\r\n          because you are tracking measurements in\r\n          <br />\r\n          another viewport.\r\n        </div>\r\n      );\r\n      break;\r\n    case 3:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"arrow-left\"\r\n            style={{ color: '#000', width: '14px', height: '14px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click to restore measurements.</div>;\r\n  }\r\n\r\n  const StatusPill = () => (\r\n    <div\r\n      className={classNames(\r\n        'group relative flex items-center justify-center px-2 rounded-full cursor-default bg-customgreen-100',\r\n        {\r\n          'hover:bg-customblue-100': state === 3,\r\n          'cursor-pointer': state === 3,\r\n        }\r\n      )}\r\n      style={{\r\n        height: '24px',\r\n        width: '55px',\r\n      }}\r\n      onClick={() => {\r\n        if (state === 3) {\r\n          if (onPillClick) {\r\n            onPillClick();\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <span className=\"pr-1 text-lg font-bold leading-none text-black\">SR</span>\r\n      <StatusIcon />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\r\n          <StatusPill />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusPill />}\r\n    </>\r\n  );\r\n}\r\n\r\n// function _onDoubleClick() {\r\n//   const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\r\n//     'manipulatorState'\r\n//   ).setters.cancelActiveManipulatorsForElement;\r\n//   const enabledElements = cornerstoneTools.store.state.enabledElements;\r\n//   enabledElements.forEach(element => {\r\n//     cancelActiveManipulatorsForElement(element);\r\n//   });\r\n// }\r\n\r\nexport default OHIFCornerstoneSRViewport;\r\n"],"names":["i","formatDate","utils","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","useTranslation","t","services","DisplaySetService","CornerstoneViewportService","MeasurementService","length","Error","trackedMeasurements","sendTrackedMeasurementsEvent","srDisplaySet","useViewportGrid","viewportGrid","viewportGridService","useViewportDialog","viewportDialogState","useState","measurementSelected","setMeasurementSelected","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","isHydrated","setIsHydrated","element","setElement","viewports","activeViewportIndex","registeredExtensionIds","includes","contextModule","getModuleEntry","tracked","useContext","context","eventName","displaySetInstanceUID","clearMeasurements","SeriesInstanceUIDs","hydrateStructuredReport","getDisplaySetsForSeries","setDisplaySetsForViewport","displaySetInstanceUIDs","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","_getViewportReferencedDisplaySetData","then","referencedDisplaySet","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","Component","component","initialImageIndex","images","findIndex","image","viewportOptions","toolGroupId","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","activeViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","React","key","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","ManufacturerModelName","StudyDate","SeriesDescription","SpacingBetweenSlices","SeriesNumber","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","isRehydratable","onPillClick","state","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","name","color","StatusPill","classNames","onClick","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","message","type","actions","onSubmit","onOutsideClick","displaySet","getDisplaySetByUID","image0","SeriesInstanceUID","propTypes","PropTypes","customProps","defaultProps"],"sourceRoot":""}